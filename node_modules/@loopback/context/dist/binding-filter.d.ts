import { Binding, BindingTag } from './binding';
import { BindingAddress } from './binding-key';
/**
 * A function that filters bindings. It returns `true` to select a given
 * binding.
 */
export declare type BindingFilter<ValueType = unknown> = (binding: Readonly<Binding<ValueType>>) => boolean;
/**
 * Select binding(s) by key or a filter function
 */
export declare type BindingSelector<ValueType = unknown> = BindingAddress<ValueType> | BindingFilter<ValueType>;
/**
 * Type guard for binding address
 * @param bindingSelector
 */
export declare function isBindingAddress(bindingSelector: BindingSelector): bindingSelector is BindingAddress;
/**
 * Create a binding filter for the tag pattern
 * @param tagPattern Binding tag name, regexp, or object
 */
export declare function filterByTag(tagPattern: BindingTag | RegExp): BindingFilter;
/**
 * Create a binding filter from key pattern
 * @param keyPattern Binding key/wildcard, regexp, or a filter function
 */
export declare function filterByKey(keyPattern?: string | RegExp | BindingFilter): BindingFilter;
